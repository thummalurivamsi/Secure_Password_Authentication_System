/*
Documentation
Name        : Vamsi T
Date        : 10/5/25
Description : Secure Password Authentication System in C
*/

#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

#define MAX_LEN 20 // Maximum length for username and password

int main()
{
    // Clear the screen (Windows-only system call)
    system("cls");

    char ch;                                      // Variable to store each character entered
    char pass[MAX_LEN], saved_pass[MAX_LEN];      // Array to store entered and saved passwords
    char user_name[MAX_LEN], saved_name[MAX_LEN]; // Array to store entered and saved usernames

    // Open the file containing saved username and password
    FILE *ptr = fopen("password.txt", "r");

    // Check if the file opened successfully
    if (ptr == NULL)
    {
        // If the file doesn't exist or can't be opened, display an error message
        printf("Error: Unable to open password file.\n");
        return 1; // Exit the program with an error code
    }

    // Read the saved username and password from the file
    fscanf(ptr, "%s %s", saved_name, saved_pass);
    fclose(ptr); // Close the file after reading

    // Loop for username verification
    while (1)
    {
        // Prompt the user to enter a username
        printf("Enter username: ");
        scanf("%s", user_name); // Read the entered username

        // Compare the entered username with the saved one
        if (strcmp(user_name, saved_name) != 0)
        {
            // If the usernames don't match, prompt again
            printf("\n******** INCORRECT USERNAME ********\nPlease try again.\n\n");
        }
        else
        {
            // If the username matches, break the loop and proceed to password verification
            break;
        }
    }

    // Loop for password verification
    while (1)
    {
        // Prompt the user to enter a password
        printf("Enter password: ");
        int i = 0; // Initialize index for password input

        while (1)
        {
            // Read a character without displaying it on the screen
            ch = getch();

            // Check if the user pressed the Enter key (ASCII 13)
            if (ch == 13)
            {
                pass[i] = '\0'; // Null-terminate the entered password
                break;          // Exit the loop when the password is entered
            }
            // Check if the user pressed the Backspace key (ASCII 8)
            else if (ch == 8)
            {
                if (i > 0) // If there's any character in the password
                {
                    i--;             // Move the index back
                    printf("\b \b"); // Erase the asterisk on the screen
                }
            }
            // Ignore Tab (ASCII 9) and Space (ASCII 32)
            else if (ch == 9 || ch == 32)
            {
                continue; // Skip the iteration if Tab or Space is pressed
            }
            // If it's a valid character, add it to the password and display '*'
            else if (i < MAX_LEN - 1) // Prevent buffer overflow
            {
                pass[i++] = ch; // Store the character in the password array
                printf("*");    // Mask the character with an asterisk
            }
        }

        // Compare the entered password with the saved one
        if (strcmp(pass, saved_pass) == 0)
        {
            // If the password matches, display success and break the loop
            printf("\n******** LOGIN SUCCESSFUL ********\n");
            break; // Exit the loop after successful login
        }
        else
        {
            // If the password doesn't match, prompt again
            printf("\n******** INCORRECT PASSWORD ********\nPlease try again.\n\n");
        }
    }

    return 0; // Exit the program successfully
}
